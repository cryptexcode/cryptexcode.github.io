<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-10T16:14:50-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sudipta Kar/ ‡¶∏‡ßÅ‡¶¶‡ßÄ‡¶™‡ßç‡¶§ ‡¶ï‡¶∞</title><subtitle></subtitle><author><name>Sudipta Kar</name><email>sudipta.kar.8080@gmail.com</email></author><entry><title type="html">Getting fibonacci sequence with immutability</title><link href="http://localhost:4000/Getting-Fibonacci-Sequence-with-Immutability/" rel="alternate" type="text/html" title="Getting fibonacci sequence with immutability" /><published>2016-12-16T00:00:00-08:00</published><updated>2016-12-16T00:00:00-08:00</updated><id>http://localhost:4000/Getting%20Fibonacci%20Sequence%20with%20Immutability</id><content type="html" xml:base="http://localhost:4000/Getting-Fibonacci-Sequence-with-Immutability/"><![CDATA[<p>Generating Fibonacci¬†sequence is definitely not a complex problem to talk about. We all did it in our early stage of programming. So I am not going to explain what it is. Let‚Äôs talk about the ways we can generate it in our familiar languages.</p>

<p>When we were just a beginner if anyone asked us to generate this sequence up to nth values, we used to give a big smile and wrote the¬†code using a for loop, right? We all know the way, so let‚Äôs skip it too. After a while, we learned about recursion and used recursion to generate the sequence like this,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static List&lt;Integer&gt; recursiveFibonacci(int position){ 
    if(position == 1) 
        return Arrays.asList(1);
    
    if(position == 2)  
        return Arrays.asList(1, 1);
        
    List&lt;Integer&gt; previousSequence = recursiveFibonacci(position - 1);  
    List&lt;Integer&gt; newSequence = new ArrayList&lt;Integer&gt;(previousSequence);
    newSequence.add(previousSequence.get(previousSequence.size() - 1) +
        		previousSequence.get(previousSequence.size() - 2));
 
    return newSequence;      
}
</code></pre></div></div>
<p>Here we are using lists and modifying it right? But what if we want to do the same task without modifying any object that means by maintaining immutability? In my previous post, I showed a demo of Stream in Java. Let's have a look at another demo of it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static List&lt;Integer&gt; immutableFibonacci(int position){
    return Stream.iterate(
                   new int[]{1, 1}, e -&gt; new int[]{e[1], e[0] + e[1]})
                  .map(e -&gt; e[0])
                  .limit(position)
                  .collect(Collectors.toList());
}
</code></pre></div></div>
<p>One liner right? ;) Honestly, I never even thought about doing this with one line of code.</p>
<p>Immutability is a mandatory part of functional programming. Is Java functional?¬†Java 8 supports functional programming basically.<br />How would this code look like in a functional language like Scala?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def immutableFibonacci(position: Int) = {
    (0 to position-1).foldLeft(List(1,1)) {
           (list, i) =&gt; list:::List(list.last + list.init.last) 
    }.take(position)
}
</code></pre></div></div>

<p>But Scala also supports imperative programming, right? So what about a purely functional language like Erlang?¬†Run this code ;)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tl(lists:reverse( lists:foldl( 
         fun(N, ListF) -&gt; [hd(tl(ListF)) + hd(ListF)] ++ ListF end, 
         [1, 0], 
         lists:seq(0, position-2))
)).
</code></pre></div></div>

<p>¬†</p>
<p>Thanks for reading this. Here is a bonus code of Python for the same purpose.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reduce(lambda sequence, _: sequence + [sequence[-1] + sequence[-2]],
                            range(position - 1), [1, 1])[:position]
</code></pre></div></div>]]></content><author><name>Sudipta Kar</name><email>sudipta.kar.8080@gmail.com</email></author><summary type="html"><![CDATA[Generating Fibonacci¬†sequence is definitely not a complex problem to talk about. We all did it in our early stage of programming. So I am not going to explain what it is. Let‚Äôs talk about the ways we can generate it in our familiar languages.]]></summary></entry><entry><title type="html">Learning from mistakes#1 ‚Äì memory error in tfidfvectorizer</title><link href="http://localhost:4000/Learning-from-Mistakes-1-Memory-Error-in-TfidfVectorizer/" rel="alternate" type="text/html" title="Learning from mistakes#1 ‚Äì memory error in tfidfvectorizer" /><published>2016-11-25T00:00:00-08:00</published><updated>2016-11-25T00:00:00-08:00</updated><id>http://localhost:4000/Learning%20from%20Mistakes#1%20%E2%80%93%20Memory%20Error%20in%20TfidfVectorizer</id><content type="html" xml:base="http://localhost:4000/Learning-from-Mistakes-1-Memory-Error-in-TfidfVectorizer/"><![CDATA[<p>I was trying to extract n-gram features from a large dataset and got a memory error. I was using TfIdfVectorizer of scikit-learn. And the error was from the large sparse matrix. I was not surprised as I was not sure if my 32GB ram is enough for around 1 million documents. However, I solved the error by the following steps.</p>

<ol>
  <li>
    <p>I changed the min_df parameter to 0.2. Here is the explanation of min_df parameter in scikit-learn.<br />
<em>min_df</em> : float in range [0.0, 1.0] or int, default=1.<br />
When building the vocabulary ignore terms that have a document frequency strictly lower than the given threshold. This value is also called cut-off in the literature. If float, the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not None.
So by changing this, I am limiting the size of the vocabulary. That helps to reduce the memory size.</p>
  </li>
  <li>
    <p>I used Regexptokenizer and Porter stemmer to tokenize and stem the words. Stemming reduces the variation of words. So it greatly helps to reduce the vocabulary size.</p>
  </li>
</ol>

<p>After doing these 2 little fixes, I got rid of the memory error üôÇ Basic problem was to reduce the vocabulary size. By the way, I was removing the stop words and lower casing from earlier.</p>

<p><em>Learning from Mistakes is a series where I will post the little challenges I face during my experiments and how I fix them. I hope someone in this world is facing the same problem and my goal is to help them.</em></p>]]></content><author><name>Sudipta Kar</name><email>sudipta.kar.8080@gmail.com</email></author><summary type="html"><![CDATA[I was trying to extract n-gram features from a large dataset and got a memory error. I was using TfIdfVectorizer of scikit-learn. And the error was from the large sparse matrix. I was not surprised as I was not sure if my 32GB ram is enough for around 1 million documents. However, I solved the error by the following steps.]]></summary></entry><entry><title type="html">Add opengl in code blocks</title><link href="http://localhost:4000/Add-OpenGL-in-Code-Blocks/" rel="alternate" type="text/html" title="Add opengl in code blocks" /><published>2012-09-20T00:00:00-07:00</published><updated>2012-09-20T00:00:00-07:00</updated><id>http://localhost:4000/Add%20OpenGL%20in%20Code%20Blocks</id><content type="html" xml:base="http://localhost:4000/Add-OpenGL-in-Code-Blocks/"><![CDATA[<p>It is an easy procedure to add OpenGL in CodeBlocks and prepare your Windows PC for OpenGL Coding.
By the way, those who are thinking OpenGL is a kind of Programming Language, you are wrong. OpenGL is a Graphics Library. It will give you scope to design graphical interfaces with a bunch of code.
Lets see, How to add it in CodeBlocks. 
I hope you have already installed CodeBlocks in your PC.</p>

<ol>
  <li>Download GLUT (OpenGL Utility Tool) from here.</li>
  <li>
    <p>Unzip the .zip file. There you will find 5 files:
glut32.dll<br />
glut32.lib<br />
glut.h<br />
glut.def<br />
README-win32.txt<br />
Now you have to do some Copy-Paste works üôÇ .</p>
  </li>
  <li>Go to Windows &gt; system in your System Drive. Usually its C:\Windows\system. Now copy the glut32.dll file there.</li>
  <li>Go to C:\Program Files directory. Create a new folder and give it a suitable name. I named it ‚ÄúOpenGL Lib‚Äú.</li>
  <li>Create 2 folders in C:\Program Files\OpenGL Lib called include &amp; lib.
Copy glut32.lib in the lib folder.
Create a folder called GL in the include folder and copy glut.h in it.
You Are Almost Done üôÇ
Now Open CODEBLOCKS. I am giving some Screenshots to help you.</li>
  <li>Create a New Project in CodeBlocks. It should be a Glut Project. Then Click Next.
<img src="/assets/post_related/opengl/1.jpg" alt="New Glut project" />
<img src="/assets/post_related/opengl/2.jpg" alt="New Glut project" /></li>
  <li>Give a Name to your Project. I named it Test Project.
<img src="/assets/post_related/opengl/3.jpg" alt="New Glut project" /></li>
  <li>Select the Location of the Glut from Program Files Directory. Click Next.
<img src="/assets/post_related/opengl/4.jpg" alt="New Glut project" /></li>
  <li>Then this screen will appear. Don‚Äôt change anything here. Click Finish.
<img src="/assets/post_related/opengl/5.jpg" alt="New Glut project" /></li>
  <li>Open Management Bar (Shift + F2). Select Project tab. Open main.cpp. It is a sample code provided there.
<img src="/assets/post_related/opengl/6.jpg" alt="New Glut project" /></li>
  <li>Write #include&lt;windows.h&gt; in Line 14. Go to Project&gt; Build Options.
<img src="/assets/post_related/opengl/7.jpg" alt="New Glut project" /></li>
  <li>
    <p>Go to Linker Settings tab and Click Add.
A Little Window will Appear saying ‚ÄúKeep this as relative path?‚Äù. Select No and press OK. 
<img src="/assets/post_related/opengl/8.jpg" alt="New Glut project" /></p>
  </li>
  <li>Build the project and Run.
<img src="/assets/post_related/opengl/9.jpg" alt="New Glut project" /></li>
</ol>

<p>If you have done everything correctly you will see this.</p>

<p>That‚Äôs all.</p>]]></content><author><name>Sudipta Kar</name><email>sudipta.kar.8080@gmail.com</email></author><summary type="html"><![CDATA[It is an easy procedure to add OpenGL in CodeBlocks and prepare your Windows PC for OpenGL Coding. By the way, those who are thinking OpenGL is a kind of Programming Language, you are wrong. OpenGL is a Graphics Library. It will give you scope to design graphical interfaces with a bunch of code. Lets see, How to add it in CodeBlocks. I hope you have already installed CodeBlocks in your PC.]]></summary></entry></feed>